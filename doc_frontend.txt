SLIPKNOT SHOP — ДОКУМЕНТ ДЛЯ ФРОНТЕНДА (doc_frontend.txt)
=========================================================

Цель
----
Этот документ объясняет структуру и правила работы фронтенда проекта Slipknot Shop,
чтобы Codex мог быстро ориентироваться в коде и уверенно выполнять задачи.

Общее описание
--------------
• Стек: Vue 3 + TypeScript (по статистике репозитория основная доля — TS и Vue).
• Сборка/разработка: обычно Vite. Если используется Vue CLI — определить по package.json.
• Пакетный менеджер: определить по lock-файлу в папке frontend
  (pnpm-lock.yaml → pnpm, yarn.lock → yarn, package-lock.json → npm).
• Архитектура: SPA с роутингом, странички каталога/товара/корзины/оформления/профиля.
• Тема/стили: тёмный градиентный фон на всю высоту страницы, модальные окна с единым
  позиционированием (translate‑центровка), без «d-block» костылей.

Структура папки `frontend/` (ожидаемая)
---------------------------------------
• src/
  ├─ assets/            — картинки, шрифты, глобальные стили
  ├─ components/        — UI‑компоненты (карточки, модалки, формы)
  ├─ views/ или pages/  — страницы (Каталог, Товар, Корзина, Оформление, Профиль)
  ├─ router/            — маршруты приложения
  ├─ store/             — состояние (Pinia или Vuex; определить по package.json)
  ├─ api/               — запросы к бэкенду (axios/fetch)
  └─ types/             — общие типы TypeScript
• index.html            — корневой html (для Vite)
• vite.config.ts        — конфиг Vite (если используется Vite)
• package.json          — скрипты/зависимости

Переменные окружения (Vite)
---------------------------
• VITE_API_BASE_URL — базовый URL бэкенда (например, http://localhost:3000)
• VITE_APP_ENV — окружение (development/production)
• Дополнительно: VITE_* ключи под сервисы (если понадобятся; читать .env.* в frontend).

Запуск и сборка (определить по package.json)
--------------------------------------------
• Установка:   <PM> install   (npm i / pnpm i / yarn)
• Дев‑сервер:  <PM> run dev   (Vite по умолчанию 5173)
• Линтер/форматтер (если есть): <PM> run lint, <PM> run format
• Прод‑сборка: <PM> run build
• Превью:      <PM> run preview

Роутинг
-------
• Проверить наличие охраны маршрутов по ролям (User/Manager/Admin). 
• Кнопка «Перейти в профиль» должна корректно вести на страницу профиля
  (был запрос на починку роутинга — проверить все точки входа и навигацию).

UI/UX требования (важно для задач по фронту)
--------------------------------------------
1) Градиентный фон должен заполнять весь бэкграунд страницы на любых высотах/соотношениях.
2) Модалки:
   • Центровка через transform/translate, без смещения при скролле.
   • Паддинги учитывают safe‑area (мобильные устройства).
   • Максимальная высота ограничена viewport, внутренний контент скроллится.
3) Полная адаптация под мобильные устройства: ровные сетки, корректные шрифты,
   отсутствие горизонтального скролла, корректные отступы.
4) Кнопка «Добавить в корзину»/«Купить» — обновлённая логика (см. соответствующую ветку задач).

Функции и доменные правила
--------------------------
• Каталог: список товаров с вариантами размеров.
• Карточка товара: выбор размера → цена меняется в зависимости от размера.
• Корзина: позиции с выбранными размерами и ценами.
• Оформление заказа: шаги адрес/страна/подтверждение, обработка ошибок форм.
• Профиль: история заказов.
• Роли: Admin/Manager/User; часть страниц/кнопок скрыта/заблокирована без прав.

Сетевое взаимодействие
----------------------
• Все запросы идут на бэкенд NestJS (см. doc_backend.txt), базовый URL берётся из VITE_API_BASE_URL.
• Авторизация: хранить токен безопасно (HttpOnly cookie предпочтительно; если Bearer в localStorage —
  предусмотреть refresh/лог-аут).
• Обрабатывать 401/403 глобальным перехватчиком и редиректить на логин.

Скриншоты для отчётов
---------------------
При выполнении UI‑задач Codex должен приложить скриншоты следующих экранов (desktop+mobile):
• Главная/Каталог, Страница авторизации/регистрации, Добавление пользователя (Admin),
  Оформление заказа (ошибка страны/адрес доставки), Подтверждение покупки товара.
• Отдельно — демонстрация градиентного фона на «высоких» страницах.

Чек‑лист для Codex перед коммитом (frontend)
--------------------------------------------
[ ] Установлены зависимости и поднят дев‑сервер.
[ ] Проверены роуты и защищённые маршруты.
[ ] Модалки отцентрованы единым способом, без «d-block».
[ ] Градиент покрывает всю страницу на любом viewport.
[ ] Размер‑зависимое ценообразование визуально корректно.
[ ] Нет консольных ошибок, линтер проходит (если есть).
[ ] Скриншоты приложены в комментарии к PR/в Tasks.
